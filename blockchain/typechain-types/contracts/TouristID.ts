/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TouristIDInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blockchainIdToPersonalId"
      | "getTouristInfo"
      | "owner"
      | "registerTourist"
      | "renounceOwnership"
      | "touristInfos"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "TouristRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blockchainIdToPersonalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTouristInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerTourist",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "touristInfos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockchainIdToPersonalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTouristInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTourist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "touristInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TouristRegisteredEvent {
  export type InputTuple = [blockchainId: BigNumberish, personalId: string];
  export type OutputTuple = [blockchainId: bigint, personalId: string];
  export interface OutputObject {
    blockchainId: bigint;
    personalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TouristID extends BaseContract {
  connect(runner?: ContractRunner | null): TouristID;
  waitForDeployment(): Promise<this>;

  interface: TouristIDInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blockchainIdToPersonalId: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getTouristInfo: TypedContractMethod<
    [_personalId: string],
    [[bigint, bigint, string]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerTourist: TypedContractMethod<
    [
      _personalId: string,
      _tripStartDate: BigNumberish,
      _tripEndDate: BigNumberish,
      _emergencyContact: string
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  touristInfos: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string, boolean] & {
        tripStartDate: bigint;
        tripEndDate: bigint;
        emergencyContact: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blockchainIdToPersonalId"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTouristInfo"
  ): TypedContractMethod<
    [_personalId: string],
    [[bigint, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerTourist"
  ): TypedContractMethod<
    [
      _personalId: string,
      _tripStartDate: BigNumberish,
      _tripEndDate: BigNumberish,
      _emergencyContact: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "touristInfos"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string, boolean] & {
        tripStartDate: bigint;
        tripEndDate: bigint;
        emergencyContact: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TouristRegistered"
  ): TypedContractEvent<
    TouristRegisteredEvent.InputTuple,
    TouristRegisteredEvent.OutputTuple,
    TouristRegisteredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TouristRegistered(uint256,string)": TypedContractEvent<
      TouristRegisteredEvent.InputTuple,
      TouristRegisteredEvent.OutputTuple,
      TouristRegisteredEvent.OutputObject
    >;
    TouristRegistered: TypedContractEvent<
      TouristRegisteredEvent.InputTuple,
      TouristRegisteredEvent.OutputTuple,
      TouristRegisteredEvent.OutputObject
    >;
  };
}
